{
  "openrpc": "1.2.4",
  "info": {
    "title": "MetaMask Solana Wallet Snap",
    "description": "JSON-RPC API of the MetaMask Solana Wallet Snap. This snap brings official Solana support to MetaMask. Create accounts, check balances, and use Solana dApps right from your MetaMask wallet. Simple, secure, and seamless.",
    "version": "1.0.0",
    "contact": {
      "name": "New Networks Team"
    },
    "license": {
      "name": "MIT"
    }
  },
  "servers": [
    {
      "name": "MetaMask Solana Wallet Snap",
      "url": "snap://npm:@metamask/solana-wallet-snap"
    }
  ],
  "methods": [
    {
      "name": "signAndSendTransactionWithIntent",
      "summary": "Sign and send a transaction with verified intent",
      "description": "Allows the client (MetaMask) to request the snap to sign and send a transaction with verified intent.\n\n**Process:**\n\n1. **Verify Backend Signature** - Ensures that the payload **{ intent, signature }** was signed by the trusted Swaps API\n2. **Match Transaction to Intent** - Verifies that the transaction performs exactly what the intent describes\n3. **Sign Transaction** - If all validation pass, signs the transaction with the user's account specified in the intent\n4. **Send Transaction** - Sends the transaction to the Solana network",
      "paramStructure": "by-name",
      "params": [
        {
          "name": "intent",
          "summary": "The user's swap intent describing the desired operation",
          "required": true,
          "schema": {
            "$ref": "#/components/schemas/SwapIntent"
          }
        },
        {
          "name": "transaction",
          "summary": "The base64-encoded transaction to sign and send",
          "required": true,
          "schema": {
            "$ref": "#/components/schemas/Base64String"
          }
        },
        {
          "name": "signature",
          "summary": "The result of signing the payload `{intent, transaction}` using <TODO SIGNING ALGORITHM> with the Swaps API's private key.",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "result": {
        "name": "SignAndSendTransactionWithIntentResult",
        "summary": "The result of signing and sending a transaction with intent",
        "schema": {
          "$ref": "#/components/schemas/SignAndSendTransactionWithIntentResult"
        }
      },
      "errors": [
        {
          "$ref": "#/components/errors/MethodNotFound"
        },
        {
          "$ref": "#/components/errors/InvalidParams"
        },
        {
          "$ref": "#/components/errors/InvalidBackendSignature"
        },
        {
          "$ref": "#/components/errors/TransactionIntentMismatch"
        },
        {
          "$ref": "#/components/errors/AccountNotFound"
        },
        {
          "$ref": "#/components/errors/InvalidTransaction"
        },
        {
          "$ref": "#/components/errors/TransactionFailed"
        }
      ],
      "examples": [
        {
          "name": "signAndSendTransactionWithIntentExample",
          "description": "Example of signing and sending a transaction with intent, where user wants to swap 1 SOL for 161.18 USDC.",
          "params": [
            {
              "name": "intent",
              "value": {
                "id": "c76b3834-b9a8-4dfd-91da-72c26a216fb2",
                "timestamp": "2025-06-04T14:52:31.307Z",
                "type": "swap",
                "slippage": 0.01,
                "from": {
                  "address": "BLw3RweJmfbTapJRgnPRvd962YDjFYAnVGd1p5hmZ5tP",
                  "asset": "solana:5eykt4UsFv8P8NJdTREpY1vzqKqZKvdp/slip44:501",
                  "amount": "1000000000"
                },
                "to": {
                  "address": "27h6cm6S9ag5y4ASi1a1vbTSKEsQMjEdfvZ6atPjmbuD",
                  "asset": "solana:5eykt4UsFv8P8NJdTREpY1vzqKqZKvdp/token:EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v",
                  "amount": "161180000"
                }
              }
            },
            {
              "name": "transaction",
              "value": "gAEAChfds67pR0IYlL1XKFGjzC+zBZIA7vT1dj7nUBTUwAs7rBn3hrWmXImk+UetGwvWumZpcEhF+xT5THD5os2Svp67H8GdfJ4jkOslaYOff/X0SeF33Cha5Ij9DKlo3QaosfIhtgnDmdJAVdjfmyv5dEGsSWgYEYPaqW8v8hSJozhYIzcQa4p5MinFjNMq4vDm+n249hE5Vmwe+Adkq87GTDegPbdaVhuqlrT5hZnIkdcW67eCFvm9ZzXM9jeWm2GwnLBGfnLp6qHLD5IgtqLXr5clzwoa2ns4KdysosGA2yFHt2dBBA/kB6qwUEagfnGzH2GY12XE3va/gn3W4Loqy/D+gP5PMjWwL4nGY8i3EGxqLHt/i3x/EskcO1ftQjYqQtqMVVDE+U/Vngb6x6+HbBOGrDQOx73j0k813TrK9dmptLgHDBoOIz6tGmWT+r9wa3YtqouLIv01/IKynGlc4TnE0M2MheikqA6gkuj1PhXVDgPc7eSLCseVMCy/WUgTmKbXmnZ/QcH3X8YTJ//GR4yvL7LCHdfHPhS8B+4hpoFusQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAKD0N0oI1T+8K47DiJ9N82JyiZvsX3fj3y3zO++Tr3FVRPixdukLDvYMw2r2DTumX5VA1ifoAVfXgkOTnLswDEoyXJY9OJInxuz0QKRSODYMLWhOZ2v8QhASOe9jb6fhZAwZGb+UhFzL/7K26csOb57yM5bvF9xJrLEObOkAAAAC0P/on9df2SnTAmx8pWHneSwmrNt/J3VFLMhqns4zl6LwHxW5grT0/F3OC6sZUj7of0yz9kMoCs+fPoYX9znOYyUOdJ8PoWqEFw7H8n7xwkhg1P1tPfo1/6arncTl4PJkEedVb8jHAbu50xW7OaBUH/bGy3qP0jlECsc2iVrwTjwan1RcYx3TJKFZjmGkdXraLXrijm0ttXHNVWyEAAAAA0LlMW0o1bBeKH7IjSDuI9G0a+7kgVaW9ubbU+rklS9sFDgIWFAkAi8sXoE0wggARAAUCuIEWABEACAMgoQcAAAAAEAYACAATDS0BARVDLQ8ABgUECCoTFRUSFSslKyIjBQooKiQrDy0tKSsMAwEVKyErHB0KBygsHisPLS0pKx8gFScPJhsHBBcZGi0JGAILFSzBIJszQdacgQMDAAAAJmQAASZkAQIaZAIDQEIPAAAAAAC78khRAQAAADIAAANOgLKSmCyUmuksqMclFoVdtmiFizz7/yF11zNd6VSAxgUkIB4dIwIhIrYRAfelfqMdEh4JHXx6VS3GXpyeWhNKQlBsx9m2I8c+BhMSEBEUWgDdfctSzc+t7n0tohMIoz7S6USQkKhKDRCUSx6C3SjhJQQJAg8EBgoMCwYQBw=="
            },
            {
              "name": "signature",
              "value": "rNaqYcw7VsWYcjHALq7nqmSXhYoUQ87hWWakzdztfsny5UGWrKYoLNwFbw9jADtAhfEdXNwyBAWn6MQkYt7UXcb"
            }
          ],
          "result": {
            "name": "signAndSendTransactionWithIntentResult",
            "value": {
              "transactionId": "DuvWiKG54eKcB1s777TgaZWtF9R23sVuEaugRufdXyqhCf6owy5hYqxeL8sa6zoCPVQu3NxxhjWuz91CKgLE6SB"
            }
          }
        }
      ]
    }
  ],
  "components": {
    "schemas": {
      "Iso8601Timestamp": {
        "type": "string",
        "format": "date-time",
        "description": "An ISO 8601 timestamp",
        "pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d{3})?Z$",
        "examples": ["2021-01-01T00:00:00Z", "2021-01-01T00:00:00.000Z"]
      },
      "UuidV4": {
        "type": "string",
        "format": "uuid",
        "description": "A UUID version 4 identifier",
        "pattern": "^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$",
        "examples": [
          "550e8400-e29b-41d4-a716-446655440000",
          "6ba7b810-9dad-11d1-80b4-00c04fd430c8"
        ]
      },
      "Base64String": {
        "type": "string",
        "description": "A base64-encoded string",
        "pattern": "^[A-Za-z0-9+/]*={0,2}$"
      },
      "SwapIntent": {
        "type": "object",
        "description": "Represents a user's intent to perform a swap operation",
        "properties": {
          "id": {
            "$ref": "#/components/schemas/UuidV4",
            "description": "Unique identifier for the intent"
          },
          "timestamp": {
            "$ref": "#/components/schemas/Iso8601Timestamp",
            "description": "ISO 8601 timestamp when the intent was created"
          },
          "type": {
            "type": "string",
            "enum": ["swap"],
            "description": "The type of operation - must be 'swap'"
          },
          "slippage": {
            "type": "number",
            "description": "Maximum acceptable slippage percentage",
            "minimum": 0,
            "maximum": 100
          },
          "from": {
            "$ref": "#/components/schemas/AssetTransfer",
            "description": "The asset and amount the user wants to send"
          },
          "to": {
            "$ref": "#/components/schemas/AssetTransfer",
            "description": "The asset and amount the user expects to receive"
          }
        },
        "required": ["id", "timestamp", "type", "slippage", "from", "to"],
        "additionalProperties": false
      },
      "AssetTransfer": {
        "type": "object",
        "description": "Represents an asset transfer with address, asset type, and amount",
        "properties": {
          "address": {
            "type": "string",
            "description": "A CAIP-10 account address, i.e., the third part of the CAIP account ID. For example, 'BLw3RweJmfbTapJRgnPRvd962YDjFYAnVGd1p5hmZ5tP'."
          },
          "asset": {
            "type": "string",
            "description": "A CAIP-19 asset type identifier, i.e., a human-readable type of asset identifier. For example, 'solana:5eykt4UsFv8P8NJdTREpY1vzqKqZKvdp/slip44:501'."
          },
          "amount": {
            "type": "string",
            "description": "Amount in the asset's smallest unit (e.g., lamports for SOL)",
            "pattern": "^[0-9]+$"
          },
          "change": {
            "type": "object",
            "description": "Optional change address for the transaction",
            "properties": {
              "address": {
                "type": "string",
                "description": "CAIP-10 account address for change"
              }
            },
            "required": ["address"],
            "additionalProperties": false
          }
        },
        "required": ["address", "asset", "amount"],
        "additionalProperties": false
      },
      "SignAndSendTransactionWithIntentResult": {
        "type": "object",
        "description": "Result of signing and sending a transaction with intent",
        "properties": {
          "transactionId": {
            "type": "string",
            "description": "The transaction signature returned after successful execution on Solana"
          }
        },
        "required": ["transactionId"],
        "additionalProperties": false
      }
    },
    "errors": {
      "MethodNotFound": {
        "code": -32601,
        "message": "The method does not exist / is not available.",
        "data": {
          "type": "object",
          "description": "The requested method is not supported by this handler",
          "properties": {
            "method": {
              "type": "string",
              "description": "The method that was requested"
            }
          }
        }
      },
      "InvalidParams": {
        "code": -32602,
        "message": "Invalid method parameter(s).",
        "data": {
          "type": "object",
          "description": "The parameters provided do not match the expected schema"
        }
      },
      "InvalidBackendSignature": {
        "code": -32602,
        "message": "Invalid backend signature",
        "data": {
          "type": "object",
          "description": "The backend signature verification failed",
          "properties": {
            "reason": {
              "type": "string",
              "enum": [
                "signatureVerificationFailed",
                "timestampExpired",
                "invalidSignatureFormat",
                "missingPublicKey"
              ],
              "description": "The specific reason why signature verification failed"
            }
          }
        }
      },
      "TransactionIntentMismatch": {
        "code": -32602,
        "message": "Transaction does not match intent",
        "data": {
          "type": "object",
          "description": "The transaction does not perform the operations described in the intent",
          "properties": {
            "reason": {
              "type": "string",
              "enum": [
                "amountMismatch",
                "assetMismatch",
                "addressMismatch",
                "unexpectedInstructions",
                "simulationFailed"
              ],
              "description": "The specific reason why the transaction doesn't match the intent"
            }
          }
        }
      },
      "AccountNotFound": {
        "code": -32602,
        "message": "Account not found",
        "data": {
          "type": "object",
          "description": "The account specified in the intent was not found in the keyring",
          "properties": {
            "address": {
              "type": "string",
              "description": "The account address that was not found"
            }
          }
        }
      },
      "InvalidTransaction": {
        "code": -32602,
        "message": "Invalid transaction",
        "data": {
          "type": "object",
          "description": "The transaction is malformed or cannot be processed",
          "properties": {
            "reason": {
              "type": "string",
              "enum": [
                "invalidBase64Encoding",
                "malformedTransaction",
                "invalidTransactionStructure",
                "missingRequiredFields"
              ],
              "description": "The specific reason why the transaction is invalid"
            }
          }
        }
      },
      "TransactionFailed": {
        "code": -32603,
        "message": "Transaction failed",
        "data": {
          "type": "object",
          "description": "The transaction was rejected by the Solana network",
          "properties": {
            "reason": {
              "type": "string",
              "enum": [
                "insufficientBalance",
                "blockhashExpired",
                "accountNotFound",
                "programError",
                "instructionError",
                "simulationFailed"
              ],
              "description": "The specific reason why the transaction failed"
            }
          }
        }
      }
    }
  }
}
